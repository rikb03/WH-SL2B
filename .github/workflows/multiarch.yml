name: CI - .NET
on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, edited, synchronize]

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:${{ github.head_ref }}


  # security_scan:
  #   runs-on: ubuntu-latest
  #   needs: [ build ]

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     -
  #       name: Setup .NET Core
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: '6.0.x'

  #     -
  #       name: Install OWASP Dependency-Check
  #       run: |
  #         wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
  #         unzip dependency-check-9.2.0-release.zip

  #     -
  #       name: Run OWASP Dependency-Check
  #       run: |
  #         ./dependency-check/bin/dependency-check.sh --project "Dierentuin_DEVOPS" --scan ./ --out . --format "ALL" --nvdApiKey ${{ secrets.NVD_API_KEY }}

  #     -
  #       name: Archive vulnerability report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: dependency-check-report
  #         path: dependency-check-report.html
          
  unit_testing:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [build, security_scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Test with the dotnet CLI
        run: dotnet test ./Dierentuin/UnitTests/UnitTests.csproj

  goss_healthcheck:
      runs-on: [self-hosted, Linux, ARM64]
      needs: [build, security_scan, unit_testing]
      env:
        GOSS_FILE: .kube/goss-healthcheck.yaml # Goss path
        GOSS_DST: /tmp # Goss destination path

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Install Goss
          run: |
            curl -fsSL https://goss.rocks/install | sh

        - name: Run Goss tests inside Docker container
          run: |
            # Combine all goss files
            /tmp/dgoss run -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:${{ github.head_ref }}

  # If the unit tests succeeded, push to dockerhub with latest tag
  push_to_latest:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [build, security_scan, unit_testing]

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Get the docker image that was built in the build job
      - name: Pull Docker image
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:${{ github.head_ref }}

      # Change the tag of the docker image to latest
      - name: Tag Docker image with new tag
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:${{ github.head_ref }} ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:latest

      # Push the docker image with the new tag
      - name: Push Docker image with new tag
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:latest