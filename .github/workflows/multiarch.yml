name: CI - .NET
on:
  workflow_dispatch:
  push:
    branches: [ test ]
  pull_request:
    types: [opened, reopened]
    branches: [ test ]

jobs:
  build:
    runs-on: [self-hosted, Linux, ARM64]
    # strategy:
    #   matrix:
    #     platform: 
    #       - linux/arm64 
          # - linux/amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:latest
        # tags: ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:${{ github.run_number }}


  # security_scan:
    # runs-on: [self-hosted, Linux, ARM64]
    # needs: [ build ]

    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v2

    #   -
    #     name: Setup .NET Core
    #     uses: actions/setup-dotnet@v1
    #     with:
    #       dotnet-version: '6.0.x'

    #   - name: Setup Java
    #     uses: actions/setup-java@v2
    #     with:
    #       distribution: 'microsoft' 
    #       java-version: '17.0.1'

    #   - name: Set up QEMU
    #     uses: docker/setup-qemu-action@v1

    #   - name: Install dependencies
    #     run: |
    #       sudo apt-get update
    #       sudo apt-get install -y libc6
          
    #   -
    #     name: Install OWASP Dependency-Check
    #     run: |
    #       wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
    #       unzip dependency-check-9.2.0-release.zip

    #   -
    #     name: Run OWASP Dependency-Check
    #     run: |
    #       ./dependency-check/bin/dependency-check.sh --project "Dierentuin_DEVOPS" --scan ./ --out . --format "ALL" --nvdApiKey ${{ secrets.NVD_API_KEY }}

    #   -
    #     name: Archive vulnerability report
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: dependency-check-report
    #       path: dependency-check-report.html
          
  unit_testing:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Test with the dotnet CLI
        run: dotnet test ./Dierentuin/UnitTests/UnitTests.csproj

  deploy:
    name: Deploy
    needs: [ build]
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_CONTENTS }}

      - name: Deploy to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: group12
          manifests: |
            .kube/deployment.yaml
            .kube/ingress.yaml
            .kube/service.yaml
          tags: 
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dierentuingroup12:latest

  post_deployment_verification:
    runs-on: [self-hosted, Linux, ARM64]
    needs: [ deploy, build ]

    steps:
      -
        name: Perform smoke tests
        run: |
          curl https://your-app-url.com/healthcheck